test <- c(1,5,3,2,60,12)
test[-(2:4)]
df <- data.frame(age=c(24,12,20),height=c(1.9,1.2,1.7),weight=c(100,35,50))
df
response='weight'
num_features <- sapply(df, is.numeric(x))
num_features <- sapply(df, is.numeric(x))
num_features <- sapply(df, is.numeric(df))
num_features <- sapply(df, is.numeric)
num_features
num_features <- num_features[num_features != response]
num_features
response
num_features != response
num_features
response
num_features[3]
name(num_features[3])
names(num_features[3])
num_features <- names(sapply(df, is.numeric))
num_features
num_features <- num_features[num_features != response]
num_features
N <- nrow(df)
N
p <- length(num_features)
p
X = matrix(data = df[,num_features], nrow = N,ncol = p)
X
View(X)
View(X)
df[,num_features]
X = matrix(data = df[,num_features], nrow = N,ncol = p,byrow = F)
X
X = matrix(data = df[,num_features], nrow = N,ncol = p,byrow = T)
X
X = matrix(data = df[,num_features])
X
as.matrix(df[,num_features])
X = matrix(data = as.matrix(df[,num_features]), nrow = N,ncol = p)
X
X = as.matrix(df[,num_features])
X
X+1
X+c(1,1,1)
cbind(rep(1,N),X)
Y = as.matrix(df$response)
df$response
df$
df
df
response
Y = as.matrix(df[,response])
Y
B <- as.matrix(rep(1, p))
B
t(X)*X
X
t(X)
B_hat <- t(X)%*%X
t(X)%*%X
diag(3)
solve(t(X)%*%X)
solve(t(X)%*%X) %*% t(x)
solve(t(X)%*%X) %*% t(X)
solve(t(X)%*%X) %*% t(X) * Y
solve(t(X)%*%X) %*% t(X) %*% Y
X%*%B_hat
t(X)%*%B_hat
return(t(X)*B_hat)
X
B_hat
solve(t(X)%*%X) %*% t(X) %*% Y
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
X %*% B_hat
cbind(df,Yhat)
Y_hat <- X %*% B_hat
cbind(df,Yhat)
cbind(df,Y_hat)
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- names(sapply(df, is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(df)
lin_mod(df, 'weight')
X %*% B_hat
cbind(df, Y_hat)
lin_mod(df, 'weight')
df
in_frame = df
lin_mod(in_frame, 'weight')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- names(sapply(df, is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(in_frame, 'weight')
lin_mod(in_frame, 'age')
X %*% B_hat
num_features <- names(sapply(df, is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
df_out
cbind(df, Y_hat)
Y_hat
X %*% B_hat
B_hat
solve(t(X)%*%X) %*% t(X) %*% Y
t(X)%*%X)
t(X)%*%X
num_features[num_features != response]
as.matrix(df[,response])
solve(t(X)%*%X)
B_hat
B_hat
X
X %*% B_hat
finish<-lin_mod(in_frame, 'age')
finish
plot(finish$age, finish$Y_hat)
in_frame <- data.frame(1000,rnorm(mean=1.7,sd=1)
finish<-lin_mod(in_frame, 'age')
plot(finish$age, finish$Y_hat)
rnorm(1000,mean=1.7,sd=1)
rnorm(1000,mean=1.7,sd=0.3)
plot(density(rnorm(1000,mean=1.7,sd=0.3)))
rnorm(1000,mean=1.65,sd=0.2)
plot(density(rnorm(1000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000,mean=1.65,sd=0.2)))
plot(density(rnorm(100000,mean=1.65,sd=0.2)))
plot(density(rnorm(100000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000000,mean=1.65,sd=0.2)))
plot(density(rnorm(1000000,mean=1.65,sd=0.2)))
plot(density(rnorm(10000000,mean=1.65,sd=0.2)))
in_frame <- data.frame()
in_frame$height<- rnorm(1000,mean=1.65,sd=0.2)
pop_size <- 1000
in_frame <- data.frame(height=rep(NA,pop_size),
weight=rep(NA,pop_size),
age=rep(NA,pop_size))
in_frame$height<- rnorm(pop_size,mean=1.65,sd=0.2)
in_frame$height/0.2
5*in_frame$height
50*in_frame$height
iris
finish<-lin_mod(iris, 'Petal-Length')
finish<-lin_mod(iris, 'Petal.Length')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- names(sapply(df, is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
print(X);print(Y)
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(iris, 'Petal.Length')
vets <- c(1,2,3)
is.numeric(vets)
vets <- c(1,2,"3")
is.numeric(vets)
names(apply(df, MARGIN = 2, FUN = is.numeric))
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- names(apply(df, MARGIN = 2, FUN = is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
print(X);print(Y)
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(iris, 'Petal.Length')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
print(names(apply(df, MARGIN = 2, FUN = is.numeric)))
num_features <- names(apply(df, MARGIN = 2, FUN = is.numeric))  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
print(X);print(Y)
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(iris, 'Petal.Length')
apply(df, MARGIN = 2, FUN = is.numeric)
colnames(df)[apply(df, MARGIN = 2, FUN = is.numeric)]
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[apply(df, MARGIN = 2, FUN = is.numeric)]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
print(X);print(Y)
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
pop_size <- 1000
in_frame <- data.frame(height=rep(NA,pop_size),
weight=rep(NA,pop_size),
age=rep(NA,pop_size))
in_frame$height<- rnorm(pop_size,mean=1.65,sd=0.2)
in_fram$weight <- 50*in_frame$height + sample(1000,)
finish<-lin_mod(iris, 'Petal.Length')
plot(finish$age, finish$Y_hat)
finish<-lin_mod(iris, 'Petal.Length')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[apply(df, MARGIN = 2, FUN = is.numeric)]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
print(B_hat)
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
lin_mod(iris, 'Petal.Length')
df <- iris
num_features <- colnames(df)[apply(df, MARGIN = 2, FUN = is.numeric)]  # Numeric variables only
num_features
colnames(df)[colnames(df) %in% names(apply(df, MARGIN = 2, FUN = is.numeric))]
unname(apply(df, MARGIN = 2, FUN = is.numeric)
unname(apply(df, MARGIN = 2, FUN = is.numeric))
unname(apply(df, MARGIN = 2, FUN = is.numeric))
df
apply(df, MARGIN = 2, FUN = is.numeric)
is.numeric(iris$Sepal.Length)
sapply(df,is.numeric)
unname(sapply(df,is.numeric)
unname(sapply(df,is.numeric))
unname(sapply(df,is.numeric))
num_features <- colnames(df)[colnames(df) %in% unname(sapply(df,is.numeric))]  # Numeric variables only
num_features
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features
num_features <- num_features[num_features != response]  # Excluding response variable
num_features
response <- 'Petal.Length'
num_features <- num_features[num_features != response]  # Excluding response variable
response <- 'Petal.Length'
num_features
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
Y
head(X
)
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
B_hat
Y_hat <- X %*% B_hat
Y_hat
df_out <- cbind(df, Y_hat)
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
finish<-lin_mod(iris, 'Petal.Length')
plot(finish$Petal.Length, finish$Y_hat)
sd(finish$Petal.length - finish$Y_hat)
finish$Petal.length - finish$Y_hat
finish$Y_hat
finish$Petal.length
sd(finish$Petal.Length - finish$Y_hat)
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
par(mfrow=c(floor(sqrt(p)),p/floor(sqrt(p))))
for(var in num_features){plot(df[,var],df[,response],main=var)}
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out)
}
finish<-lin_mod(iris, 'Petal.Length')
levels(iris$Species)
finish<-lin_mod(iris, 'Petal.Length')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
par(mfrow=c(floor(sqrt(p)),p/floor(sqrt(p))))
for(var in num_features){plot(df[,var],df[,response],main=var)}
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(df_out,B_hat)
}
finish, beta<-lin_mod(iris, 'Petal.Length')
finish<-lin_mod(iris, 'Petal.Length')
finish<-lin_mod(iris, 'Petal.Length')
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
Y <- as.matrix(df[,response])  # Response variable as matrix
par(mfrow=c(floor(sqrt(p)),p/floor(sqrt(p))))
for(var in num_features){plot(df[,var],df[,response],main=var)}
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(list(table=df_out,weights=B_hat))
}
finish<-lin_mod(iris, 'Petal.Length')
finish$weights
lin_mod <- function(df, response){
# Takes a dataframe and the name of the variable to predict as input.
# Returns the input dataframe with the estimated age after minimizing RSS
num_features <- colnames(df)[unname(sapply(df,is.numeric))]  # Numeric variables only
num_features <- num_features[num_features != response]  # Excluding response variable
N <- nrow(df)  # Number of observations
p <- length(num_features)  # Number of input variables
X <- as.matrix(df[,num_features])  # Transforming into matrix
X <- cbind(rep(1,N),X)  # Adding intercept
df[,response] <- as.numeric(df[,response])
Y <- as.matrix(df[,response])  # Response variable as matrix
par(mfrow=c(floor(sqrt(p)),p/floor(sqrt(p))))
for(var in num_features){plot(df[,var],df[,response],main=var)}
# Solution of the derivative by beta to minimize RSS
B_hat <- solve(t(X)%*%X) %*% t(X) %*% Y
Y_hat <- X %*% B_hat
df_out <- cbind(df, Y_hat)
return(list(table=df_out,weights=B_hat))
}
finish<-lin_mod(iris, 'Species')
plot(finish_table$species, finish$Y_hat)
finish<-lin_mod(iris, 'Species')
finish_table<- finish$table
finish_beta<- finish$weights
plot(finish_table$species, finish$Y_hat)
plot(finish_table$species, finish_table$Y_hat)
finish_table
plot(finish_table$Species, finish_table$Y_hat)
plot(finish_table$Species, finish_table$Y_hat)
abline(h=seq(1.5,3,0.5)
sd(finish_table$Petal.Length - finish_table$Y_hat)
abline(h=seq(1.5,3,0.5))
plot(finish_table$Species, finish_table$Y_hat)
abline(h=seq(1.5,3,1))
length(finish_table$Species[finish_table$Species != round(finish_table$Y_hat)])
length(finish_table$Species[finish_table$Species != round(finish_table$Y_hat)])/nrow(finish_table)
1 - length(finish_table$Species[finish_table$Species != round(finish_table$Y_hat)])/nrow(finish_table)
sd(finish_table$Petal.Length - finish_table$Y_hat)
sd(finish_table$Species - finish_table$Y_hat)
