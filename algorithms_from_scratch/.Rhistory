xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
out_var='Petal.Length'
for(it in seq(1,2000,20)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
out_var='Petal.Length'
for(it in seq(1,100,1)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
cross_val <- function(data, response, folds, exact=T, speed=0.001, iter=200){
# Cross validation: leave one out
init <- rep(NA,nrow(data))  #  initializing df for cross-val. output
accuracy <- data.frame(pred=init, folds=init)
#accuracy <- data.frame(pred = numeric(0), folds = numeric(0))
weight_list <- list(); MSE=rep(NA, folds)
pool <- 1:nrow(data)  # pool of rows from which to sample folds
fold_size <- floor(nrow(data)/folds)  # Number of samples per fold
fold_list <- matrix(ncol = folds, nrow = fold_size)  # initializing data structure for folds
for(i in 1:folds){  # Leave one out (each obs once)
fold_list[,i] <- sample(pool[!is.na(pool)], size = fold_size, replace = F)  # randomly sampling fold
pool[fold_list[,i]] <- NA #  removing samples in fold from sample pool
trained <- train_mod(data[-fold_list[,i],], response, exact, speed, iter)  # Training without fold i
test_obs <- predict_mod(data[fold_list[,i],], response, trained$weights)  # Predicting fold i
SE <- (as.numeric(test_obs) - as.numeric(data[fold_list[,i],response]))^2 # Squared error
MSE[i] <- mean(SE)
# computing mean squared error from real value
weight_list[[i]] <- trained$weights
test_obs <- data.frame(pred=test_obs,folds=rep(i,fold_size))
accuracy[fold_list[,i],] <- test_obs
#accuracy <- rbind(accuracy, test_obs)
}
return(list(accuracy=accuracy, weights=weight_list, MSE=MSE))
}
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
results$accuracy
out_var='Petal.Length'
for(it in seq(1,100,1)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
#results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
out_var='Petal.Length'
for(it in seq(1,100,1)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
#results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
for(it in seq(1,100,1)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
#results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(1)
}
out_var='Petal.Length'
for(it in seq(1,100,1)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
#results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.1)
}
out_var='Petal.Length'
for(it in seq(1,1000,10)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
#results <-cross_val(iris,out_var, folds=5, exact=T)
#results$accuracy <- results$accuracy[order(as.numeric(rownames(results$accuracy))),]
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.1)
}
plot(density((iris[,out_var] - results$pred)^2))
results$pred
plot(density((iris[,out_var] - results$accuracy$pred)^2))
boxplot(t(do.call(cbind,results$weights)),pch="x")
out_var<- 'Species'
results <- cross_val(iris, out_var, exact=F, speed=0.006, iter=100)
results <- cross_val(iris, out_var, folds=5, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=1, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
results <- cross_val(iris, out_var, folds=2, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=3, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=4, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=5, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=6, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
results <- cross_val(iris, out_var, folds=25, exact=F, speed=0.006, iter=100)
plot(as.numeric(iris[,out_var]),results$accuracy$pred)
abline(h=c(1.5,2.5),col="red")
length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris)
out_var<- 'Species'
classified <- c()
for(f in 2:150){
results <- cross_val(iris, out_var, folds=25, exact=F, speed=0.006, iter=100)
classified <- append(classified, length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris))
}
out_var<- 'Species'
classified <- c()
for(f in 2:150){
results <- cross_val(iris, out_var, folds=f, exact=F, speed=0.006, iter=100)
classified <- append(classified, length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris))
}
out_var<- 'Species'
classified <- c()
for(f in 2:150){
results <- cross_val(iris, out_var, folds=f, exact=F, speed=0.006, iter=100)
classified <- append(classified, length(iris$Species[round(results$accuracy$pred)==as.numeric(iris[,out_var])])/nrow(iris))
}
plot(2:150, classified)
plot(2:150, classified, type='l')
fitted_lines <- t(do.call(cbind,results$weights))
boxplot(fitted_lines)
seq(0.0001,0.01,0.0005)
seq(0.0001,0.05,0.0005)
seq(1,1000,10)
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), sq_err=numeric(0))
for(it in seq(1,1000,10)){
for(lc in seq(0.0001,0.05,0.0005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(it, lc, (iris[,out_var] - results$accuracy$pred)^2)
assess_perf <- rbind(assess_perf, tmp_row)
Sys.sleep(0.1)
}
assess_perf
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,1000,10)){
for(lc in seq(0.0001,0.05,0.0005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(it, lc, mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
Sys.sleep(0.1)
}
assess_perf
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,1)){
for(lc in seq(0.0001,0.05,0.0005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(it, lc, mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
assess_perf
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,1)){
for(lc in seq(0.0001,0.05,0.0005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
assess_perf
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,1)){
for(lc in seq(0.0001,0.05,0.0005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
assess_perf
colnames(assess_perf) <- c('iterations', 'learning rate', 'mean squared error')
assess_perf
install.packages("plot3D")
library("plot3D")
scatter3D(assess_perf$iterations, assess_perf$`learning rate`, assess_perf$`mean squared error`)
scatter3D(assess_perf$iterations, assess_perf$`learning rate`*1000, assess_perf$`mean squared error`)
scatter3D(assess_perf$iterations, assess_perf$`learning rate`*1000000, assess_perf$`mean squared error`)
scatter3D(assess_perf$iterations, assess_perf$`learning rate`, log(assess_perf$`mean squared error`)
)
scatter3D(assess_perf$iterations, assess_perf$`learning rate`, -log(assess_perf$`mean squared error`))
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,20)){
for(lc in seq(0.0001,0.5,0.005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,20)){
for(lc in seq(0.0001,0.5,0.005))
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
colnames(assess_perf) <- c('iterations', 'learning', 'mean_squared_error')
scatter3D(assess_perf$iterations, assess_perf$learning, assess_perf$mean_squared_error)
assess_perf
for(it in seq(1,100,5)){
for(lc in seq(0.0001,0.5,0.005)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=0.006, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
colnames(assess_perf) <- c('iterations', 'learning', 'mean_squared_error')
scatter3D(assess_perf$iterations, assess_perf$learning, assess_perf$mean_squared_error)
scatter3D(assess_perf$iterations, assess_perf$learning, -log(assess_perf$mean_squared_error))
assess_perf
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,5)){
for(lc in seq(0.0001,0.5,0.005)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=lc, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
colnames(assess_perf) <- c('iterations', 'learning', 'mean_squared_error')
scatter3D(assess_perf$iterations, assess_perf$learning, -log(assess_perf$mean_squared_error))
assess_perf
assess_plot <- assess_perf[assess_perf$learning<0.3,]
scatter3D(assess_plot$iterations, assess_plot$learning, -log(assess_plot$mean_squared_error))
scatter3D(assess_plot$iterations, assess_plot$learning, -log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
scatter3D(assess_plot$iterations, assess_plot$learning, assess_plot$mean_squared_error,clab=colnames(assess_plot))
assess_plot
assess_plot <- assess_perf[assess_perf$learning<0.1,]
scatter3D(assess_plot$iterations, assess_plot$learning, assess_plot$mean_squared_error,clab=colnames(assess_plot))
assess_plot <- assess_perf[assess_perf$learning<0.05,]
scatter3D(assess_plot$iterations, assess_plot$learning, assess_plot$mean_squared_error,clab=colnames(assess_plot))
assess_plot
assess_plot <- assess_perf[assess_perf$learning<0.01,]
scatter3D(assess_plot$iterations, assess_plot$learning, assess_plot$mean_squared_error,clab=colnames(assess_plot))
scatter3D(assess_plot$iterations, assess_plot$learning, log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
assess_plot <- assess_perf[assess_perf$learning<0.5,]
scatter3D(assess_plot$iterations, assess_plot$learning, log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
assess_plot <- assess_perf[assess_perf$learning<0.5,]
scatter3D(assess_plot$iterations, assess_plot$learning, 0.0003*log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
assess_plot <- assess_perf[assess_perf$learning<0.5,]
scatter3D(assess_plot$iterations, assess_plot$learning, 0.00000000000003*log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
log(assess_plot$mean_squared_error)
max(log(assess_plot$mean_squared_error))
assess_plot <- assess_perf[is.finite(assess_perf$mean_squared_error),]
scatter3D(assess_plot$iterations, assess_plot$learning, log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,5)){
for(lc in seq(0.0001,0.5,0.005)){
results <-cross_val(iris,out_var, folds=5,exact=F,speed=lc, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
learn=numeric(0), cost=numeric(0))
for(it in seq(1,100,1)){
for(f in seq(2,nrow(iris),1)){
results <-cross_val(iris,out_var, folds=f,exact=F,speed=0.005, iter=it)
tmp_row <- c(iterations=it, learn=lc,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
out_var='Petal.Length'
assess_perf <- data.frame(iterations=numeric(0),
fold=numeric(0), cost=numeric(0))
for(it in seq(1,100,1)){
for(f in seq(2,nrow(iris),1)){
results <-cross_val(iris,out_var, folds=f,exact=F,speed=0.005, iter=it)
tmp_row <- c(iterations=it, fold=f,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
colnames(assess_perf) <- c('iterations', 'k_fold', 'mean_squared_error')
scatter3D(assess_plot$iterations, assess_plot$k_fold, assess_plot$mean_squared_error,clab=colnames(assess_plot),pch='.')
View(assess_perf)
assess_plot <- assess_perf[is.finite(assess_perf$mean_squared_error),]
assess_plot <- assess_perf[!is.na(assess_perf$mean_squared_error),]
View(assess_perf)
View(assess_plot)
scatter3D(assess_plot$iterations, assess_plot$k_fold, assess_plot$mean_squared_error,clab=colnames(assess_plot),pch='.')
,pch='.'
scatter3D(assess_plot$iterations, assess_plot$k_fold, assess_plot$mean_squared_error,clab=colnames(assess_plot))
scatter3D(assess_plot$iterations, assess_plot$k_fold, -log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
View(assess_plot)
scatter3D(assess_plot$iterations, assess_plot$k_fold, -log(assess_plot$mean_squared_error),clab=colnames(assess_plot),surf = T)
scatter3D(assess_plot$iterations, assess_plot$k_fold, -log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
scatter3D(assess_plot$iterations, assess_plot$k_fold, log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
assess_folds <- c()
assess_folds <- c()
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=5, exact=T)
assess_folds <- append(assess_folds, mean((iris[,out_var] - results$accuracy$pred)^2))
}
plot(2:150, assess_folds)
plot(2:150, assess_folds,type='l')
assess_folds <- c()
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=5, exact=T)
assess_folds <- append(assess_folds, mean((iris[,out_var] - results$accuracy$pred)^2))
}
plot(2:150, assess_folds,type='l')
assess_folds <- c()
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=5, exact=T)
assess_folds <- append(assess_folds, mean((iris[,out_var] - results$accuracy$pred)^2))
}
plot(2:150, assess_folds,type='l')
assess_folds <- rep(0,150)
for(i in 1:100){
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=5, exact=T)
assess_folds[f] <- assess_folds[f] + mean((iris[,out_var] - results$accuracy$pred)^2) / 100
}}
assess_folds <- rep(0,150)
for(i in 1:10){
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=f, exact=T)
assess_folds[f] <- assess_folds[f] + mean((iris[,out_var] - results$accuracy$pred)^2) / 10
}}
plot(2:150, assess_folds[2:150])
assess_folds <- rep(0,150)
for(i in 1:1){
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=f, exact=T)
assess_folds[f] <- assess_folds[f] + mean((iris[,out_var] - results$accuracy$pred)^2) / 1
}}
plot(2:150, assess_folds[2:150])
plot(2:150, assess_folds[2:150],type='l'7)
plot(2:150, assess_folds[2:150],type='l')
assess_folds
results$accuracy$pred
mean((iris[,out_var] - results$accuracy$pred)^2)
assess_folds <- rep(0,150)
for(i in 1:1){
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=f, exact=T)
assess_folds[f] <- assess_folds[f] + mean((iris[,out_var] - results$accuracy$pred)^2, na.rm=T) / 1
}}
plot(2:150, assess_folds[2:150],type='l')
assess_folds <- rep(0,150)
for(i in 1:100){
for(f in seq(2,150)){
results <-cross_val(iris,out_var, folds=f, exact=T)
assess_folds[f] <- assess_folds[f] + mean((iris[,out_var] - results$accuracy$pred)^2, na.rm=T) / 100
}}
plot(2:150, assess_folds[2:150],type='l')
results <-cross_val(iris,out_var, folds=f, exact=T)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
plot(density((iris[,out_var] - results$accuracy$pred)^2))
cross_val(iris, out_var, folds=150, exact=T)
cross_val(iris,out_var, folds=f,exact=F,speed=0.005, iter=100)
cross_val(iris,out_var, folds=f,exact=F,speed=0.005, iter=100)
assess_plot <- assess_perf[!is.na(assess_perf$mean_squared_error),]
scatter3D(assess_plot$iterations, assess_plot$k_fold, log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
scatter3D(assess_plot$iterations, assess_plot$k_fold, -log(assess_plot$mean_squared_error),clab=colnames(assess_plot))
boxplot(t(do.call(cbind,results$weights)),pch="x")
plot(density((iris[,out_var] - results$accuracy$pred)^2))
results <-cross_val(iris,out_var, folds=f, exact=T)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
results <-cross_val(iris,out_var, folds=2, exact=T)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
results <-cross_val(iris,out_var, folds=20, exact=T)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
results <-cross_val(iris,out_var, folds=5, exact=T)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
for(it in 1:100){
results <-cross_val(iris,out_var, folds=5, exact=F, speed=0.005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
}
for(it in 1:100){
results <-cross_val(iris,out_var, folds=5, exact=F, speed=0.005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,100,1)){
for(f in seq(2,nrow(iris),1)){
results <-cross_val(iris,out_var, folds=f,exact=F,speed=0.05, iter=it)
tmp_row <- c(iterations=it, fold=f,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
for(it in 1:100){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in 1:100){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.05, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,100,3)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,300,10)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,3000,100)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,100,1)){
for(f in seq(2,nrow(iris),1)){
results <-cross_val(iris,out_var, folds=f,exact=F,speed=0.05, iter=it)
tmp_row <- c(iterations=it, fold=f,
cost=mean((iris[,out_var] - results$accuracy$pred)^2))
assess_perf <- rbind(assess_perf, tmp_row)
}
}
for(it in seq(1,3000,100)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,3000,100)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
for(it in seq(1,3000,10)){
results <-cross_val(iris,out_var, folds=3, exact=F, speed=0.0005, iter = it)
plot(as.numeric(iris[,out_var]),results$accuracy$pred,col=results$accuracy$folds,
xlim=c(0,10),ylim=c(0,10))
abline(a=0,b=1)
Sys.sleep(0.2)
}
